[{"title":"Maid","type":0,"sectionRef":"#","url":"api/Maid","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Maid","url":"api/Maid#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Maid","url":"api/Maid#new","content":"&lt;/&gt; Maid.new() → Maid Constructs a new Maid object local maid = Maid.new()   "},{"title":"isMaid​","type":1,"pageTitle":"Maid","url":"api/Maid#isMaid","content":"&lt;/&gt; Maid.isMaid(value: any) → boolean Returns true if the class is a maid, and false otherwise. print(Maid.isMaid(Maid.new())) --&gt; true print(Maid.isMaid(nil)) --&gt; false   "},{"title":"Destroy​","type":1,"pageTitle":"Maid","url":"api/Maid#Destroy","content":"&lt;/&gt; Maid.Destroy() → () Alias for Maid.DoCleaning()  "},{"title":"__index​","type":1,"pageTitle":"Maid","url":"api/Maid#__index","content":"&lt;/&gt; Maid:__index(index: any) → MaidTask Returns Maid[key] if not part of Maid metatable local maid = Maid.new() maid._current = Instance.new(&quot;Part&quot;) print(maid._current) --&gt; Part maid._current = nil print(maid._current) --&gt; nil   "},{"title":"__newindex​","type":1,"pageTitle":"Maid","url":"api/Maid#__newindex","content":"&lt;/&gt; Maid:__newindex( index: any, newTask: MaidTask ) → () Add a task to clean up. Tasks given to a maid will be cleaned when maid[index] is set to a different value. Task cleanup is such that if the task is an event, it is disconnected. If it is an object, it is destroyed. Maid[key] = (function) Adds a task to perform Maid[key] = (event connection) Manages an event connection Maid[key] = (Maid) Maids can act as an event connection, allowing a Maid to have other maids to clean up. Maid[key] = (Object) Maids can cleanup objects with a `Destroy` method Maid[key] = nil Removes a named task.   "},{"title":"GiveTask​","type":1,"pageTitle":"Maid","url":"api/Maid#GiveTask","content":"&lt;/&gt; Maid:GiveTask( task: MaidTask-- An item to clean ) → number-- taskId Gives a task to the maid for cleanup, but uses an incremented number as a key.  "},{"title":"GivePromise​","type":1,"pageTitle":"Maid","url":"api/Maid#GivePromise","content":"&lt;/&gt; Maid:GivePromise(promise: Promise&lt;T&gt;) → Promise&lt;T&gt; Gives a promise to the maid for clean.  "},{"title":"DoCleaning​","type":1,"pageTitle":"Maid","url":"api/Maid#DoCleaning","content":"&lt;/&gt; Maid:DoCleaning() → () Cleans up all tasks and removes them as entries from the Maid. note Signals that are already connected are always disconnected first. After that any signals added during a cleaning phase will be disconnected at random times. tip DoCleaning() may be recursively invoked. This allows the you to ensure that tasks or other tasks. Each task will be executed once. However, adding tasks while cleaning is not generally a good idea, as if you add a function that adds itself, this will loop indefinitely. "},{"title":"SecureClick","type":0,"sectionRef":"#","url":"api/SecureClick","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"SecureClick","url":"api/SecureClick#functions","content":" "},{"title":"ToBoolean​","type":1,"pageTitle":"SecureClick","url":"api/SecureClick#ToBoolean","content":"&lt;/&gt; SecureClick.ToBoolean( ...: any-- Argument to make boolean ) → boolean Makes argument a boolean  "},{"title":"CheckClick​","type":1,"pageTitle":"SecureClick","url":"api/SecureClick#CheckClick","content":"&lt;/&gt; SecureClick.CheckClick( playerWhoClicked: Player ,-- Player who clicked clickDetector: ClickDetector,-- The clickdetector that got activated maxActivationDistance: number-- The max activation distance of the clickdetector ) → ( boolean,-- If click is valid string-- Reason ) Makes argument a boolean  "},{"title":"new​","type":1,"pageTitle":"SecureClick","url":"api/SecureClick#new","content":"&lt;/&gt; SecureClick.new( parent: Instance -- To what should the clickdetector be parented to? ) → () Creates a new secure clickdetector  "},{"title":"Block​","type":1,"pageTitle":"SecureClick","url":"api/SecureClick#Block","content":"&lt;/&gt; SecureClick:Block( player: Player -- Targeted player ) → () Adds player to the public blacklist  "},{"title":"Unblock​","type":1,"pageTitle":"SecureClick","url":"api/SecureClick#Unblock","content":"&lt;/&gt; SecureClick:Unblock( player: Player -- Targeted player ) → () Removes player from the public blacklist  "},{"title":"Timeout​","type":1,"pageTitle":"SecureClick","url":"api/SecureClick#Timeout","content":"&lt;/&gt; SecureClick:Timeout( player: Player ,-- Targeted player seconds: number-- Amount of time to wait before removing player from public blacklist ) → () Blocks player for given amount of time for every clickdetector "},{"title":"ClickDetector","type":0,"sectionRef":"#","url":"api/ClickDetector","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"ClickDetector","url":"api/ClickDetector#functions","content":" "},{"title":"OnClick​","type":1,"pageTitle":"ClickDetector","url":"api/ClickDetector#OnClick","content":"&lt;/&gt; ClickDetector:OnClick( callback: (playerWhoClicked: Player ) → ()-- Callback that runs on click ) → RBXScriptConnection -- Connection that is made Runs callback when click is valid  "},{"title":"Wait​","type":1,"pageTitle":"ClickDetector","url":"api/ClickDetector#Wait","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; ClickDetector:Wait() → Player -- Player that has clicked the clickdetector Waits for clickdetector to be clicked  "},{"title":"OnBlock​","type":1,"pageTitle":"ClickDetector","url":"api/ClickDetector#OnBlock","content":"&lt;/&gt; ClickDetector:OnBlock( callback: (playerBlocked: Player ) → ()-- Callback that runs on blocked ) → RBXScriptConnection -- Connection that is made Runs callback when player has been blocked  "},{"title":"OnTimeOut​","type":1,"pageTitle":"ClickDetector","url":"api/ClickDetector#OnTimeOut","content":"&lt;/&gt; ClickDetector:OnTimeOut( callback: (playerTimedOut: Player ) → ()-- Callback that runs on time out ) → RBXScriptConnection -- Connection that is made Runs callback when player has been timed out  "},{"title":"OnTooFar​","type":1,"pageTitle":"ClickDetector","url":"api/ClickDetector#OnTooFar","content":"&lt;/&gt; ClickDetector:OnTooFar( callback: (playerWhoClicked: Player ) → ()-- Callback that runs on too far ) → RBXScriptConnection -- Connection that is made Runs callback when player clicked too far  "},{"title":"OnError​","type":1,"pageTitle":"ClickDetector","url":"api/ClickDetector#OnError","content":"&lt;/&gt; ClickDetector:OnError( callback: ( reason: string, data: {[string]: any} ) → ()-- Callback that runs on error ) → RBXScriptConnection -- Connection that is made Runs callback when there was an error  "},{"title":"OnAutoClick​","type":1,"pageTitle":"ClickDetector","url":"api/ClickDetector#OnAutoClick","content":"&lt;/&gt; ClickDetector:OnAutoClick( callback: (playerWhoClicked: Player ) → ()-- Callback that runs on atuo clicker detected ) → RBXScriptConnection -- Connection that is made Runs callback when player has an auto clicker  "},{"title":"SetMaxActivationDistance​","type":1,"pageTitle":"ClickDetector","url":"api/ClickDetector#SetMaxActivationDistance","content":"&lt;/&gt; ClickDetector:SetMaxActivationDistance( distance: number-- Amount of distance ) → () Sets max activation distance of the clickdetector  "},{"title":"Block​","type":1,"pageTitle":"ClickDetector","url":"api/ClickDetector#Block","content":"&lt;/&gt; ClickDetector:Block( player: Player -- Targeted player ) → () Adds player to the blacklist of this clickdetector  "},{"title":"Unblock​","type":1,"pageTitle":"ClickDetector","url":"api/ClickDetector#Unblock","content":"&lt;/&gt; ClickDetector:Unblock( player: Player -- Targeted player ) → () Removes player from the blacklist of this clickdetector  "},{"title":"Timeout​","type":1,"pageTitle":"ClickDetector","url":"api/ClickDetector#Timeout","content":"&lt;/&gt; ClickDetector:Timeout( player: Player ,-- Targeted player seconds: number-- Amount of time to wait before removing player from public blacklist ) → () Blocks player for given amount of time for this clickdetector  "},{"title":"Disable​","type":1,"pageTitle":"ClickDetector","url":"api/ClickDetector#Disable","content":"&lt;/&gt; ClickDetector:Disable() → () Disables the clickdetector, enabling debounce and setting the max activation distance to 0  "},{"title":"Enable​","type":1,"pageTitle":"ClickDetector","url":"api/ClickDetector#Enable","content":"&lt;/&gt; ClickDetector:Enable() → () Enables the clickdetector, disabling debounce and setting the max activation distance back to what it was  "},{"title":"Destroy​","type":1,"pageTitle":"ClickDetector","url":"api/ClickDetector#Destroy","content":"&lt;/&gt; ClickDetector:Destroy() → nil Destroys the clickdetector and removes the connections "},{"title":"Signal","type":0,"sectionRef":"#","url":"api/Signal","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Signal","url":"api/Signal#functions","content":" "},{"title":"isSignal​","type":1,"pageTitle":"Signal","url":"api/Signal#isSignal","content":"&lt;/&gt; Signal.isSignal(value: any) → boolean Returns whether a class is a signal  "},{"title":"new​","type":1,"pageTitle":"Signal","url":"api/Signal#new","content":"&lt;/&gt; Signal.new() → Signal&lt;T&gt; Constructs a new signal.  "},{"title":"Fire​","type":1,"pageTitle":"Signal","url":"api/Signal#Fire","content":"&lt;/&gt; Signal:Fire( ...: T-- Variable arguments to pass to handler ) → () Fire the event with the given arguments. All handlers will be invoked. Handlers follow  "},{"title":"Connect​","type":1,"pageTitle":"Signal","url":"api/Signal#Connect","content":"&lt;/&gt; Signal:Connect( handler: (...T) → ()-- Function handler called when :Fire(...) is called ) → RBXScriptConnection  Connect a new handler to the event. Returns a connection object that can be disconnected.  "},{"title":"Wait​","type":1,"pageTitle":"Signal","url":"api/Signal#Wait","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Signal:Wait() → T Wait for fire to be called, and return the arguments it was given.  "},{"title":"Destroy​","type":1,"pageTitle":"Signal","url":"api/Signal#Destroy","content":"&lt;/&gt; Signal:Destroy() → () Disconnects all connected events to the signal. Voids the signal as unusable. Sets the metatable to nil. "},{"title":"Utils","type":0,"sectionRef":"#","url":"api/Utils","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Utils","url":"api/Utils#functions","content":" "},{"title":"TableToString​","type":1,"pageTitle":"Utils","url":"api/Utils#TableToString","content":"&lt;/&gt; Utils:TableToString( tbl: {[any]: any},-- The table that becomes a string label: string?,-- Add a label to string (like a title) deepPrint: boolean?-- Also tables in the given table ) → string Makes given table a string, label can be added or &quot;TABLE&quot; would be used as default. Use deepPrint for also adding tables that are in the table! "}]